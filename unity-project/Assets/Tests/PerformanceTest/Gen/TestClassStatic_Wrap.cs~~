
using System;

namespace PuertsStaticWrap
{
    public static class TestClassStatic_Wrap
    {

        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8ConstructorCallback))]
        private static IntPtr Constructor(IntPtr isolate, IntPtr info, int paramLen, long data)
        {
            try
            {

                {
            
                    {
                
                        var result = new TestClassStatic();
                
                        return Puerts.Utils.GetObjectPtr((int)data, typeof(TestClassStatic), result);
                    
                    }
                
                }
            
    
            } catch (Exception e) {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
            return IntPtr.Zero;
        }
    
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_EmptyFunction(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    {
                
                        TestClassStatic.EmptyFunction();
                
                        
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_ReturnIntValue(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    {
                
                        var result = TestClassStatic.ReturnIntValue();
                
                        Puerts.PuertsDLL.ReturnNumber(isolate, info, result);
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_ReturnBooleanValue(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    {
                
                        var result = TestClassStatic.ReturnBooleanValue();
                
                        Puerts.PuertsDLL.ReturnBoolean(isolate, info, result);
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_ReturnStringValue(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    {
                
                        var result = TestClassStatic.ReturnStringValue();
                
                        Puerts.PuertsDLL.ReturnString(isolate, info, result);
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_ReturnDateValue(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    {
                
                        var result = TestClassStatic.ReturnDateValue();
                
                        Puerts.ResultHelper.Set((int)data, isolate, info, result);
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_ReturnBigIntValue(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    {
                
                        var result = TestClassStatic.ReturnBigIntValue();
                
                        Puerts.PuertsDLL.ReturnBigInt(isolate, info, result);
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_ReturnArrayBufferValue(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    {
                
                        var result = TestClassStatic.ReturnArrayBufferValue();
                
                        Puerts.ResultHelper.Set((int)data, isolate, info, result);
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_ReturnNativeObjectValue(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    {
                
                        var result = TestClassStatic.ReturnNativeObjectValue();
                
                        Puerts.ResultHelper.Set((int)data, isolate, info, result);
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_IntArg(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
                var Arg0 = (int)Puerts.PuertsDLL.GetNumberFromValue(isolate, Puerts.PuertsDLL.GetArgumentValue(info, 0), false); // argHelper0.GetInt32(false);
        
                TestClassStatic.IntArg(Arg0);
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_IntArgChecked(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
                var Arg0 = (int)Puerts.PuertsDLL.GetNumberFromValue(isolate, Puerts.PuertsDLL.GetArgumentValue(info, 0), false); // argHelper0.GetInt32(false);
        
                TestClassStatic.IntArgChecked(Arg0);
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_BooleanArg(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                var Arg0 = (bool)Puerts.PuertsDLL.GetBooleanFromValue(isolate, Puerts.PuertsDLL.GetArgumentValue(info, 0), false); // argHelper0.GetInt32(false);
                
                TestClassStatic.BooleanArg(Arg0);
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_BooleanArgChecked(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                var Arg0 = (bool)Puerts.PuertsDLL.GetBooleanFromValue(isolate, Puerts.PuertsDLL.GetArgumentValue(info, 0), false); // argHelper0.GetInt32(false);
                
                TestClassStatic.BooleanArgChecked(Arg0);
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_StringArg(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                var Arg0 = (string)Puerts.PuertsDLL.GetStringFromValue(isolate, Puerts.PuertsDLL.GetArgumentValue(info, 0), false); // argHelper0.GetInt32(false);
                
                TestClassStatic.StringArg(Arg0);
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_StringArgChecked(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                var Arg0 = (string)Puerts.PuertsDLL.GetStringFromValue(isolate, Puerts.PuertsDLL.GetArgumentValue(info, 0), false); // argHelper0.GetInt32(false);
                
                TestClassStatic.StringArgChecked(Arg0);
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_DateArg(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                var Arg0 = (double)Puerts.PuertsDLL.GetDateFromValue(isolate, Puerts.PuertsDLL.GetArgumentValue(info, 0), false); // argHelper0.GetInt32(false);
                
                TestClassStatic.DateArg((new DateTime(1970, 1, 1)).AddMilliseconds(Arg0));
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_DateArgChecked(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                var Arg0 = (double)Puerts.PuertsDLL.GetDateFromValue(isolate, Puerts.PuertsDLL.GetArgumentValue(info, 0), false); // argHelper0.GetInt32(false);
                                        
                TestClassStatic.DateArgChecked((new DateTime(1970, 1, 1)).AddMilliseconds(Arg0));
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_BigIntArg(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                var Arg0 = (long)Puerts.PuertsDLL.GetBigIntFromValue(isolate, Puerts.PuertsDLL.GetArgumentValue(info, 0), false); // argHelper0.GetInt32(false);
                
                TestClassStatic.BigIntArg(Arg0);
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_BigIntArgChecked(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                var Arg0 = (long)Puerts.PuertsDLL.GetBigIntFromValue(isolate, Puerts.PuertsDLL.GetArgumentValue(info, 0), false); // argHelper0.GetInt32(false);
        
                TestClassStatic.BigIntArgChecked(Arg0);
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_ArrayBufferArg(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                var Length = 0;
                var Arg0 = (IntPtr)Puerts.PuertsDLL.GetArrayBufferFromValue(isolate, Puerts.PuertsDLL.GetArgumentValue(info, 0), out Length, false); // argHelper0.GetInt32(false);

                TestClassStatic.ArrayBufferArg(new Puerts.ArrayBuffer(Arg0, Length));
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_ArrayBufferArgChecked(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                var Length = 0;
                var Arg0 = (IntPtr)Puerts.PuertsDLL.GetArrayBufferFromValue(isolate, Puerts.PuertsDLL.GetArgumentValue(info, 0), out Length, false); // argHelper0.GetInt32(false);
                
                TestClassStatic.ArrayBufferArgChecked(new Puerts.ArrayBuffer(Arg0, Length));
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_NativeObjectArg(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                var Arg0 = (IntPtr)Puerts.PuertsDLL.GetObjectFromValue(isolate, Puerts.PuertsDLL.GetArgumentValue(info, 0), false); // argHelper0.GetInt32(false);
                
                TestClassStatic.NativeObjectArg((NativeObjectClass)Puerts.JsEnv.jsEnvs[(int)data].objectPool.Get(Arg0.ToInt32()));
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_NativeObjectArgChecked(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                var Arg0 = (IntPtr)Puerts.PuertsDLL.GetObjectFromValue(isolate, Puerts.PuertsDLL.GetArgumentValue(info, 0), false); // argHelper0.GetInt32(false);
                
                TestClassStatic.NativeObjectArgChecked((NativeObjectClass)Puerts.JsEnv.jsEnvs[(int)data].objectPool.Get(Arg0.ToInt32()));
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_IntOut(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    var argHelper0 = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                
                    {
                
                        var Arg0 = argHelper0.GetInt32(true);
                    
                        TestClassStatic.IntOut(out Arg0);
                
                        argHelper0.SetByRefValue(Arg0);
                        
                        
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_BooleanOut(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    var argHelper0 = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                
                    {
                
                        var Arg0 = argHelper0.GetBoolean(true);
                    
                        TestClassStatic.BooleanOut(out Arg0);
                
                        argHelper0.SetByRefValue(Arg0);
                        
                        
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_StringOut(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    var argHelper0 = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                
                    {
                
                        var Arg0 = argHelper0.GetString(true);
                    
                        TestClassStatic.StringOut(out Arg0);
                
                        argHelper0.SetByRefValue(Arg0);
                        
                        
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_DateOut(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    var argHelper0 = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                
                    {
                
                        var Arg0 = argHelper0.Get<System.DateTime>(true);
                    
                        TestClassStatic.DateOut(out Arg0);
                
                        argHelper0.SetByRefValue(Arg0);
                        
                        
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_BigIntOut(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    var argHelper0 = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                
                    {
                
                        var Arg0 = argHelper0.GetInt64(true);
                    
                        TestClassStatic.BigIntOut(out Arg0);
                
                        argHelper0.SetByRefValue(Arg0);
                        
                        
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_ArrayBufferOut(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    var argHelper0 = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                
                    {
                
                        var Arg0 = argHelper0.Get<Puerts.ArrayBuffer>(true);
                    
                        TestClassStatic.ArrayBufferOut(out Arg0);
                
                        argHelper0.SetByRefValue(Arg0);
                        
                        
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_NativeObjectOut(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    var argHelper0 = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                
                    {
                
                        var Arg0 = argHelper0.Get<NativeObjectClass>(true);
                    
                        TestClassStatic.NativeObjectOut(out Arg0);
                
                        argHelper0.SetByRefValue(Arg0);
                        
                        
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_IntRef(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    var argHelper0 = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                
                    {
                
                        var Arg0 = argHelper0.GetInt32(true);
                    
                        TestClassStatic.IntRef(ref Arg0);
                
                        argHelper0.SetByRefValue(Arg0);
                        
                        
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_BooleanRef(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    var argHelper0 = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                
                    {
                
                        var Arg0 = argHelper0.GetBoolean(true);
                    
                        TestClassStatic.BooleanRef(ref Arg0);
                
                        argHelper0.SetByRefValue(Arg0);
                        
                        
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_StringRef(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    var argHelper0 = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                
                    {
                
                        var Arg0 = argHelper0.GetString(true);
                    
                        TestClassStatic.StringRef(ref Arg0);
                
                        argHelper0.SetByRefValue(Arg0);
                        
                        
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_DateRef(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    var argHelper0 = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                
                    {
                
                        var Arg0 = argHelper0.Get<System.DateTime>(true);
                    
                        TestClassStatic.DateRef(ref Arg0);
                
                        argHelper0.SetByRefValue(Arg0);
                        
                        
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_BigIntRef(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    var argHelper0 = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                
                    {
                
                        var Arg0 = argHelper0.GetInt64(true);
                    
                        TestClassStatic.BigIntRef(ref Arg0);
                
                        argHelper0.SetByRefValue(Arg0);
                        
                        
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_ArrayBufferRef(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    var argHelper0 = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                
                    {
                
                        var Arg0 = argHelper0.Get<Puerts.ArrayBuffer>(true);
                    
                        TestClassStatic.ArrayBufferRef(ref Arg0);
                
                        argHelper0.SetByRefValue(Arg0);
                        
                        
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
        
        [Puerts.MonoPInvokeCallback(typeof(Puerts.V8FunctionCallback))]
        private static void F_NativeObjectRef(IntPtr isolate, IntPtr info, IntPtr self, int paramLen, long data)
        {
            try
            {
                
        
                {
            
                    var argHelper0 = new Puerts.ArgumentHelper((int)data, isolate, info, 0);
                
                    {
                
                        var Arg0 = argHelper0.Get<NativeObjectClass>(true);
                    
                        TestClassStatic.NativeObjectRef(ref Arg0);
                
                        argHelper0.SetByRefValue(Arg0);
                        
                        
                        
                        
                    }
                
                }
            
            }
            catch (Exception e)
            {
                Puerts.PuertsDLL.ThrowException(isolate, "c# exception:" + e.Message + ",stack:" + e.StackTrace);
            }
        }
            
        public static Puerts.TypeRegisterInfo GetRegisterInfo()
        {
            return new Puerts.TypeRegisterInfo()
            {
                BlittableCopy = false,
                Constructor = Constructor,
                Methods = new System.Collections.Generic.Dictionary<Puerts.MethodKey, Puerts.V8FunctionCallback>()
                {   
                    { new Puerts.MethodKey { Name = "EmptyFunction", IsStatic = true}, F_EmptyFunction },
                    { new Puerts.MethodKey { Name = "ReturnIntValue", IsStatic = true}, F_ReturnIntValue },
                    { new Puerts.MethodKey { Name = "ReturnBooleanValue", IsStatic = true}, F_ReturnBooleanValue },
                    { new Puerts.MethodKey { Name = "ReturnStringValue", IsStatic = true}, F_ReturnStringValue },
                    { new Puerts.MethodKey { Name = "ReturnDateValue", IsStatic = true}, F_ReturnDateValue },
                    { new Puerts.MethodKey { Name = "ReturnBigIntValue", IsStatic = true}, F_ReturnBigIntValue },
                    { new Puerts.MethodKey { Name = "ReturnArrayBufferValue", IsStatic = true}, F_ReturnArrayBufferValue },
                    { new Puerts.MethodKey { Name = "ReturnNativeObjectValue", IsStatic = true}, F_ReturnNativeObjectValue },
                    { new Puerts.MethodKey { Name = "IntArg", IsStatic = true}, F_IntArg },
                    { new Puerts.MethodKey { Name = "IntArgChecked", IsStatic = true}, F_IntArgChecked },
                    { new Puerts.MethodKey { Name = "BooleanArg", IsStatic = true}, F_BooleanArg },
                    { new Puerts.MethodKey { Name = "BooleanArgChecked", IsStatic = true}, F_BooleanArgChecked },
                    { new Puerts.MethodKey { Name = "StringArg", IsStatic = true}, F_StringArg },
                    { new Puerts.MethodKey { Name = "StringArgChecked", IsStatic = true}, F_StringArgChecked },
                    { new Puerts.MethodKey { Name = "DateArg", IsStatic = true}, F_DateArg },
                    { new Puerts.MethodKey { Name = "DateArgChecked", IsStatic = true}, F_DateArgChecked },
                    { new Puerts.MethodKey { Name = "BigIntArg", IsStatic = true}, F_BigIntArg },
                    { new Puerts.MethodKey { Name = "BigIntArgChecked", IsStatic = true}, F_BigIntArgChecked },
                    { new Puerts.MethodKey { Name = "ArrayBufferArg", IsStatic = true}, F_ArrayBufferArg },
                    { new Puerts.MethodKey { Name = "ArrayBufferArgChecked", IsStatic = true}, F_ArrayBufferArgChecked },
                    { new Puerts.MethodKey { Name = "NativeObjectArg", IsStatic = true}, F_NativeObjectArg },
                    { new Puerts.MethodKey { Name = "NativeObjectArgChecked", IsStatic = true}, F_NativeObjectArgChecked },
                    { new Puerts.MethodKey { Name = "IntOut", IsStatic = true}, F_IntOut },
                    { new Puerts.MethodKey { Name = "BooleanOut", IsStatic = true}, F_BooleanOut },
                    { new Puerts.MethodKey { Name = "StringOut", IsStatic = true}, F_StringOut },
                    { new Puerts.MethodKey { Name = "DateOut", IsStatic = true}, F_DateOut },
                    { new Puerts.MethodKey { Name = "BigIntOut", IsStatic = true}, F_BigIntOut },
                    { new Puerts.MethodKey { Name = "ArrayBufferOut", IsStatic = true}, F_ArrayBufferOut },
                    { new Puerts.MethodKey { Name = "NativeObjectOut", IsStatic = true}, F_NativeObjectOut },
                    { new Puerts.MethodKey { Name = "IntRef", IsStatic = true}, F_IntRef },
                    { new Puerts.MethodKey { Name = "BooleanRef", IsStatic = true}, F_BooleanRef },
                    { new Puerts.MethodKey { Name = "StringRef", IsStatic = true}, F_StringRef },
                    { new Puerts.MethodKey { Name = "DateRef", IsStatic = true}, F_DateRef },
                    { new Puerts.MethodKey { Name = "BigIntRef", IsStatic = true}, F_BigIntRef },
                    { new Puerts.MethodKey { Name = "ArrayBufferRef", IsStatic = true}, F_ArrayBufferRef },
                    { new Puerts.MethodKey { Name = "NativeObjectRef", IsStatic = true}, F_NativeObjectRef }
                },
                Properties = new System.Collections.Generic.Dictionary<string, Puerts.PropertyRegisterInfo>()
                {
                    
                },
                LazyMembers = new System.Collections.Generic.List<Puerts.LazyMemberRegisterInfo>()
                {   
                }
            };
        }
    
    }
}
